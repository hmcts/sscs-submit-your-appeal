#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/submit-your-appeal'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def product = "sscs"
def component = "tribunals-frontend"

List<LinkedHashMap<String, Object>> secrets = [
  secret('idam-sscs-oauth2-client-secret', 'SERVICES_IDAM_SECRET')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("nodejs", product, component) {
    enableDockerBuild()
    enableDeployToAKS()
    before('securitychecks') {sh 'yarn test:audit'}
    loadVaultSecrets(secrets)
    setVaultName('sscs')
    after("smoketest:preview") {
        stage('Application URLs') {
            def AppDevUrl = env.TEST_URL.replace("https", "http")
            AppDevUrl = AppDevUrl.replace("-staging.", ".")
            println "Application URL: " + AppDevUrl
            println "Healthcheck URL: " + AppDevUrl + "/health"
            println "Kudu URL: " + AppDevUrl.replace(".service.", ".scm.service.")
        }
    }

	  before('smoketest:aks') {
    // workaround to fix SIDAM whitelisting for PR AKS URLs
    try {
      def encodedServiceName = 'sscs'
      def aksUrlToWhitelist = env.TEST_URL + '/authenticated'
      sh('curl -X PATCH https://idam-api.aat.platform.hmcts.net/testing-support/services/' + encodedServiceName +
        ' -H \'Content-Type: application/json\'' +
        ' -H \'cache-control: no-cache\'' +
        ' -d \'[{' +
          '"operation":"add",' +
          '"field":"redirect_uri",' +
          '"value":"' + aksUrlToWhitelist + '"' +
        '}]\'')
    } catch (err) {
      notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update SIDAM PR whitelisting'
    }
  }
}
