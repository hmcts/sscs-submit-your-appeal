#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/submit-your-appeal'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']]),
         parameters([
           string(name: 'URL_TO_TEST', defaultValue: 'https://sscs-tribunals-frontend-pr-1431.preview.platform.hmcts.net', description: 'The URL you want to run these tests against'),
           string(name: 'SecurityRules',
             defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
             description: 'The URL you want to run these tests against'),
         ])
])

@Library("Infrastructure")

def product = "sscs"
def component = "tribunals-frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline("nodejs", product, component) {

  env.TEST_URL = params.URL_TO_TEST
  env.Rules = params.SecurityRules

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }

  enableSecurityScan()
  enableCrossBrowserTest(60)
  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  afterSuccess('akschartsinstall'){
    onMaster {
      // Vars needed for AKS testing in path to live
      env.CHUNKS = 4
    }
  }

  afterSuccess("smoketest:preview") {
      stage('Application URLs') {
          def AppDevUrl = env.TEST_URL.replace("https", "http")
          AppDevUrl = AppDevUrl.replace("-staging.", ".")
          println "Application URL: " + AppDevUrl
          println "Healthcheck URL: " + AppDevUrl + "/health"
          println "Kudu URL: " + AppDevUrl.replace(".service.", ".scm.service.")
      }
  }
}
