#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/submit-your-appeal'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def product = "sscs"
def component = "tribunals-frontend"
def secrets = [
        'sscs-${env}': [
                secret('idam-sscs-oauth2-client-secret', 'SERVICES_IDAM_SECRET'),
                secret('postcode-lookup-token', 'POSTCODE_LOOKUP_TOKEN'),
                secret('pcq-token-key', 'SERVICE_TOKEN_KEY')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline("nodejs", product, component) {

  env.POSTCODE_LOOKUP_ENABLED = false
  loadVaultSecrets(secrets)

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }

  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  afterSuccess('akschartsinstall'){
    onMaster {
      // Vars needed for AKS testing in path to live
      env.CHUNKS = 4
    }
  }

  afterSuccess("smoketest:preview") {
      stage('Application URLs') {
          def AppDevUrl = env.TEST_URL.replace("https", "http")
          AppDevUrl = AppDevUrl.replace("-staging.", ".")
          println "Application URL: " + AppDevUrl
          println "Healthcheck URL: " + AppDevUrl + "/health"
          println "Kudu URL: " + AppDevUrl.replace(".service.", ".scm.service.")
      }
  }
}
