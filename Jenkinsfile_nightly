#!groovy

properties([
        pipelineTriggers([cron('H 08 * * 1-5')]),
        parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'https://benefit-appeal.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
                string(name: 'IDAM_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The IDAM URL where test accounts get created'),
                string(name: 'TRIBUNALS_CASE_API_URL', defaultValue: 'http://sscs-tribunals-api-aat.service.core-compute-aat.internal', description: 'The Tribunal api to view the cases'),
                string(name: 'SecurityRules',
                        defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),
                string(name: 'NUMBER_RUNNING_PARALLEL', defaultValue: '4', description: 'Number of parallel tests to run'),
        ])
])

@Library("Infrastructure")

def product = "sscs-tribunals"
def component = "frontend"
def secrets = [
        'sscs-${env}': [
                secret('idam-sscs-oauth2-client-secret', 'SERVICES_IDAM_SECRET'),
                secret('postcode-lookup-token', 'POSTCODE_LOOKUP_TOKEN'),
                secret('pcq-token-key', 'SERVICE_TOKEN_KEY')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline("nodejs", product, component) {
    loadVaultSecrets(secrets)
    env.TEST_URL = params.URL_TO_TEST
    env.TRIBUNALS_CASE_API_URL = params.TRIBUNALS_CASE_API_URL
    env.CHUNKS = params.NUMBER_RUNNING_PARALLEL

    enableCrossBrowserTest(60)
//     enableFortifyScan('sscs-aat')
    enableFullFunctionalTest(120)
    enableMutationTest()

//     afterSuccess('fortify-scan') {
//         steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
//     }

    afterAlways('crossBrowserTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/crossbrowser-output/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/crossbrowser-report/*/**'
        stage('Accessibility test') {
            try {
                yarnBuilder.yarn('test:accessibility')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing         : true,
                        alwaysLinkToLastBuild: true,
                        keepAll              : true,
                        reportDir            : "test/e2e/accessibility-report",
                        reportFiles          : 'index.html',
                        reportName           : 'SYA E2E Accessibility test report'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/accessibility-output/*'
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/accessibility-report/*'
            }
        }
    }

    afterSuccess('crossBrowserTest') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "test/e2e/crossbrowser-report",
                reportFiles          : "index.html",
                reportName           : "SYA E2E Crossbrowser test report"
        ]
        enableSlackNotifications('#sscs-tech')
    }

    afterAlways('mutationTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/mutation-output/*/**'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/mutation-report/*/**'
    }

    afterSuccess('mutationTest') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "test/e2e/mutation-report",
                reportFiles          : "index.html",
                reportName           : "SYA E2E Mutation test report"
        ]
    }

    afterAlways('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/functional-output/*/**'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/e2e/functional-report/*/**'
    }

    afterSuccess('fullFunctionalTest') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "test/e2e/functional-report",
                reportFiles          : "index.html",
                reportName           : "SYA E2E Functional test report"
        ]
    }
}
