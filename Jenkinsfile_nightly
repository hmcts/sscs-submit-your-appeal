#!groovy

properties([
        pipelineTriggers([cron('H 08 * * 1-5')]),
        parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'https://benefit-appeal.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
                string(name: 'IDAM_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The IDAM URL where test accounts get created'),
                string(name: 'TRIBUNALS_CASE_API_URL', defaultValue: 'http://sscs-tribunals-api-aat.service.core-compute-aat.internal', description: 'The Tribunal api to view the cases'),
                string(name: 'SecurityRules',
                 defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                 description: 'The URL you want to run these tests against'),
        ])
])

@Library("Infrastructure")

def product = "sscs-tribunals"
def component = "frontend"
def secrets = [
        'sscs-${env}': [
                secret('idam-sscs-oauth2-client-secret', 'SERVICES_IDAM_SECRET'),
                secret('postcode-lookup-token', 'POSTCODE_LOOKUP_TOKEN'),
                secret('pcq-token-key', 'SERVICE_TOKEN_KEY')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline("nodejs", product, component) {
    loadVaultSecrets(secrets)
    env.TEST_URL = params.URL_TO_TEST
    env.TRIBUNALS_CASE_API_URL = params.TRIBUNALS_CASE_API_URL

    before('DependencyCheckNightly') {sh 'yarn test : audit'}
    enableCrossBrowserTest(60)
//     enableFortifyScan('sscs-aat')
    enableFullFunctionalTest(120)
    enableSecurityScan()
    enableMutationTest()

//     afterSuccess('fortify-scan') {
//         steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
//     }

    afterSuccess('crossBrowserTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
        enableSlackNotifications('#sscs-tech')
     }

     afterSuccess('fullFunctionalTest') {

        publishHTML target: [
                allowMissing : true,
                alwaysLinkToLastBuild: true,
                keepAll : true,
                reportDir : "output",
                reportFiles : "SYA-e2e-result.html",
                reportName : "SYA E2E functional tests result"
        ]
    }
}
